#******************************************************************************
#  File: INSTALL
#  
#  Comments: How to buid the project.
#  
#  Compiler: 
#     gcc/g++ (GCC) 3.2.2 20030222 - Red Hat 9 (i386) - kernel 2.4
#     gcc/g++ 3.3.3 20040412 - Fedora Core 2 (i686) - kernel 2.6.10
#     gcc/g++ 3.4.3 20050227 - Fedora Core 3 (i386) - kernel 2.6.12
#     gcc/g++ 4.0.0 20050519 - Fedora Core 4 (i686) - kernel 2.6.11
#     gcc/g++ 4.0.1 20050727 - Fedora Core 4 (x86_64) - kernel 2.6.12
#     WIN32: Visual Studio 6.0 (MS Windows 2000) - use test.dsp for build it
#  
#  History:
#      Nov-16-2005: Javier Fuchs                                   |\_/|   
#                   Phone (+54 2944) 525173                       /     \  
#                   http://southfox.servehttp.com                /_.~ ~,_\ 
#                                                                   \@/    
#*****************************************************************************/

+-----------------------+
| BUILDING WITH LINUX   |
+-----------------------+

Howto compile the files under Linux:

- USING GNU/MAKE
  -----------------------
1. Execute make in the directory 
    #  make
2. To clean (delete objects and executable files)
    #  make clean

This is the result of make:
    g++ -c -Wall -O3 -g -ggdb -Wno-deprecated  test.cpp
    g++ -c -Wall -O3 -g -ggdb -Wno-deprecated  subset.cpp
    g++ -c -Wall -O3 -g -ggdb -Wno-deprecated  queue.cpp
    g++ -c -Wall -O3 -g -ggdb -Wno-deprecated  stack.cpp
    g++ -c -Wall -O3 -g -ggdb -Wno-deprecated  util.cpp
    g++ -Wall -O3 -g -ggdb -Wno-deprecated  test.o subset.o queue.o stack.o util.o -o test


+-----------------------+
| BUILDING WITH WINDOWS |
+-----------------------+

Instructions to compile the project under windows:

1. Open the Developer Studio Project file: 
    test.dsp
2. Press <Ctrl>+<F5> 

9. Execute the test:
   - Pressing <Ctrl>+<F5> or in the menu:
      'Build' -> 'Execute TestDll.exe'


+-----------------------+
| RUN THE PROGRAM       |
+-----------------------+

How to run the program:
-----------------------

# ./test

Then appears the main menu:

   | Comparative recursion, stacks, and queues.
   | Please select an operation:
   |  1: Create a subset sum (subset)
   |  0: Quit

Select 1 and press [enter]

   | Your menu selection: 1
   | Enter an integer: 10

It shows you this submenu:

   | Comparative recursion, stacks, and queues.
   | subset created with the following values: 1 2 3 4 5 6 7 8 9 10
   |  r: Find first solution using recursion
   |  s: Find first solution using a stack
   |  q: Find first solution using a queue
   |  R: Calculate and print all posible solutions using recursion
   |  S: Calculate and print all posible solutions using a stack
   |  Q: Calculate and print all posible solutions using a queue
   |  0: delete the subset and go back
   | Your menu selection:         

+) Using recursion:
   If you want to search a number, like 22, you can press r, and then 22 ( or r22, is the same):

   | Your menu selection: r22
   | Enter a partial result to search using recursion:
   | Searching for k = 22
   | Using this values: 1 2 3 4 5 6 7 8 9 10
   | Generating solutions between 1 and 55
   |
   | Result: k = 22 is generated by 7 5 4 3 2 1
   |
   | Finded.
   | The operation takes 0.00035 seconds.


+) Using a stack:

   | Your menu selection: s22
   | Enter a partial result to search using a stack:
   | Searching for k = 22
   | Using this values: 1 2 3 4 5 6 7 8 9 10
   | Generating solutions between 1 and 55
   |
   | Result: k = 22 is generated by 7 5 4 3 2 1
   |
   | Finded.
   | The operation takes 0.00029 seconds.


+) Using a queue:

   | Your menu selection: q22
   | Enter a partial result to search using a queue:
   | Searching for k = 22
   | Using this values: 1 2 3 4 5 6 7 8 9 10
   | Generating solutions between 1 and 55
   |
   | Result: k = 22 is generated by 1 2 3 4 5 7
   |
   | Finded.
   | The operation takes 0.00019 seconds.


+) Print the last results
Just, Select the option p:

   | p: Print the last solution

And it prints the last search:

   | Your menu selection: p
   | solution
   | --------
   | 1 2 3 4 5 7


+) If you want all the list of generated numbers.
You can try the option R for recursion, S for stack or Q for queue.

   | R: Calculate and print all posible solutions using recursion
   | S: Calculate and print all posible solutions using a stack
   | Q: Calculate and print all posible solutions using a queue

And it shows you all posible combination between 1 and 10 (without repetition).

There is no limit in memory and in size of stacks queues or when the recursivity is done. 
So, be carefull with numbers too big or your machine will be crazy.

+) To go back, just select 0 (cero)
   It cleans the memory and go back to the main menu.

   | 0: delete the subset and go back

********************************************************************************
